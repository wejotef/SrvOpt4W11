@echo off & setlocal enabledelayedexpansion
title SrvOpt4W11
color 0F
set /a errorTimeoutSecs=10
::
:: Path to the optimized services CSV file: adjust if needed
set "listOpt=.\optimized_services_list.csv"
::
::
set "TAB=   "
set "BLANK= "
if not exist "%listOpt%" (
echo(
echo %BLANK%Fatal errror:
echo %TAB%File %listOpt% not found. Exiting...
timeout /t !errorTimeoutSecs! > NUL
endlocal & exit
)
:: UAC
:: Force running this script as Administrator
set "forceAdminVBS=%TEMP%\forceadmin.vbs"
set "params=%*"
cd /d "%~dp0" && ( if exist "%forceAdminVBS%" del /F /Q "%forceAdminVBS%" ) && fsutil dirty query %systemdrive% 1>nul 2>nul || (  echo Set UAC = CreateObject^("Shell.Application"^) : UAC.ShellExecute "cmd.exe", "/k cd ""%~sdp0"" && ""%~s0"" %params%", "", "runas", 1 >> "%forceAdminVBS%" && "%forceAdminVBS%" && exit /B )
::
:start
pushd "%CD%"

:: Verifying version of Windows OS
call :CheckWindowsVersion
:: Testing on PowerShell 7.x
call :CheckPowerShell
:: Check Windows' system language is ENGLISH
call :CheckSystemLanguage
::
call :ScanOptimizedServices
::
set "listLocal=%TEMP%\local_services_list.csv"
set "listOptExtended=%TEMP%\optimzed_services_list_extended.csv"
set "logOptimization=%TEMP%\log_optimized_services.csv"
call :ScanLocalServices
::
set /a cntCurrDisabled=0
set /a cntCurrDemand=0
set /a cntCurrAuto=0
set /a cntCurrAutoDelayed=0
set /a cntCurrManual=0
set /a cntCurrRunning=0
call :GetLocalServicesProps
::
call :GetDifferences

echo(
goto :end

call :CreateSystemRestorePoint
set /a windowsDefenderDisabled=0
call :DisableWindowsDefender
call :OptimizeStartupTypes
if !windowsDefenderDisabled! NEQ 0 (
call :EnableWindowsDefender
)
call :ShowOptimizerLog
::
:end

i

::
echo(
echo Cleaning up temporary files...
if exist "%forceAdminVBS%" del /F /Q "%forceAdminVBS%"
if exist "!listLocal!" del /f /q "!listLocal!"
if exist "!listOptExtended!" del /f /q "!listOptExtended!"
if exist "%logOptimization%" ( del /f /q "%logOptimization%" ) 
timeout /t 5 > nul 
::
popd & endlocal & exit
::
:CheckPowerShell
setlocal enabledelayedexpansion
set "powershell=C:\Program Files\PowerShell\7\pwsh.exe"
if not exist "!powershell!" (
	echo(
	echo Missing PowerShell v7.x on this computer what is required to continue this script.
	echo Should it be installed now^?
	set /p "userInput=YN "
	if /I "!userInput!"=="N" (
		goto :end
	) else (
	echo Installing PowerShell (will take a while)
	winget install --id Microsoft.PowerShell --source  > NUL
	echo(
	if not exist "!powershell!" (
		echo Failed. Exiting
		timeout /t !errorTimeoutSecs! > NUL & goto :end
	)
	for /f "tokens=2 delims= " %%a in ('pwsh -v') do (
		if not "%errorlevel%"=="0" (
			echo Failed. Exiting
			timeout /t !errorTimeoutSecs! > NUL & goto :end
		)
	)
	reg add "HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Image File Execution Options\powershell.exe" /v Debugger /t REG_SZ /d "C:\Program Files\PowerShell\7\pwsh.exe" /f > NUL
	echo Done.
)
endlocal
goto :EOF
::
:CreateSystemRestorePoint
echo(
echo %BLANK%Creating a System Restore point (takes time^!)...
wmic.exe /Namespace:\\root\default Path SystemRestore Call CreateRestorePoint "Optimize System Services", 100, 7 > NUL
echo %BANK%Finished.
goto :EOF
::
:ScanOptimizedServices
setlocal enabledelayedexpansion
echo(
echo %BLANK%Loading data...
for %%f in ("%listOpt%") do ( set "fileName=%%~nxf" )
for %%a in (%listOpt%) do (
		if %%~za equ 0 (
		echo %BLANK%Result:
		echo %TAB%The file !fileName! is empty. Exiting...
		timeout /t !errorTimeoutSecs! > NUL & goto :end
	)
)
set /a cntOpt=0
for /f "skip=1 tokens=*" %%a in (%listOpt%) do (
	set "line=%%a" & set "line=!line:"=!" & set "line=!line:,=!"
	if not "!line!"=="" ( set /a cntOpt+=1 )
)
if !cntOpt! EQU 0 (
		echo %BLANK%Result:
		echo %TAB%The file !fileName! is empty. Exiting...
		timeout /t !errorTimeoutSecs! > NUL & goto :end
	)
)
echo %BLANK%Result:
echo %TAB%File !fileName! contains !cntOpt! entries
endlocal
goto :EOF
::
:ScanLocalServices
setlocal enabledelayedexpansion
echo(
echo %BLANK%Scanning local services...
pwsh -ExecutionPolicy Bypass -Command "Get-Service | Select-Object Name, StartType, Status | Sort-Object Name | Export-Csv -Path %listLocal% -ErrorAction SilentlyContinue 2>NUL
set /a cntLocal=0 & set /a cntRunning=0
for /f "tokens=1,2,3 delims=," %%a in (%listLocal%) do (
	set "serviceName=%%a" & set "testServiceName=!serviceName:"=!"
	if not "!testServiceName!"=="" (
			set /a cntLocal+=1
			set "runState=%%c" & set "runState=!runState:"=!"
			if /I "!runState!"=="Running" (
		 		set /a cntRunning+=1
		    )
		)
	)
)
echo %TAB%Result:
echo %TAB%!cntLocal! services are installed on computer.
echo %TAB%Herefrom !cntRunning! are running.
endlocal
goto :EOF
::
:CheckSystemLanguage
:: Check Windows' system language is ENGLISH
setlocal enabledelayedexpansion
for /f "tokens=2*" %%a in ('reg query "HKCU\Control Panel\International" /v LocaleName') do (
	set "osLanguage=%%b"
)
echo !osLanguage! | findstr /I /C:"en-" > NUL
if not "%errorlevel%"=="0" (
echo(
echo %BLANK%This script only works properly in English versions of Windows 11,
echo %BLANK%if in non-English versions of Windows, properties and their names
echo %BLANK%might be localized, and this can interfere with how the script processes
echo %BLANK%service information.
echo(
echo Proceed?
set /P "userInput=YN "
if /I "!userInput!"=="N" ( goto :end )
)
endlocal
goto :EOF
::
:GetLocalServicesProps
setlocal enabledelayedexpansion
echo(
echo %BLANK%Obtaining from all local services the current StartType, RunState...
if exist "%listOptExtended%" ( del /f /q "%listOptExtended%" )
for /f "tokens=1,2,3 delims=," %%a in (%listLocal%) do (
	set "serviceName=%%a" & set "testServiceName=!serviceName:"=!"
	if not "!testServiceName!"=="" (
		set "startType=%%b"
		set "runState=%%c"
		sc query !serviceName! 2>NUL 1>NUL
		if "%errorlevel%"=="0" (
			for /f "skip=1 tokens=1,2 delims=," %%a in (%listOpt%) do	(
				set "serviceName2=%%a" & set "testServiceName2=!serviceName2:"=!"
				if "!testServiceName2!"	== "!testServiceName!" (
					set "startType2=%%b"
					set line=!serviceName!,!startType2!,!runState!
					echo !line! >> "%listOptExtended%"
					break
				)
			)
		)
	    :: Populate the statistics
		set "testStartType=!startType:"=!"
		if "!testStartType!"=="Demand" (
			 set /a cntCurrDemand+=1
        	) else if "!testStartType!"=="Automatic" (
			set /a cntCurrAuto+=1
		) else if "!testStartType!"=="Manual" (
			set /a cntCurrManual+=1
		) else if "!testStartType!"=="AutomaticDelayedStart" (
				set /a cntCurrAutoDelayed+=1
		) else (
			set /a cntCurrDisabled+=1
		)
	)
)
if not exist "%listOptExtended%" (
echo (
echo %BLANK%Fatal internal error occurred! Exiting...
echo(
timeout /t !errorTimeoutSecs! > NUL
goto :end
)
echo %BLANK%Result:
echo %TAB%Disabled: !cntCurrDisabled!
echo %TAB%Automatic: !cntCurrAuto!
echo %TAB%AutomaticDelayed: !cntCurrAutoDelayed!
echo %TAB%Manual: !cntCurrManual!
echo %TAB%Demand: !cntCurrDemand!
endlocal
goto :EOF
::
:GetDifferences
echo(
echo %BLANK%Getting differences with regards to services^' optimized StartType...
setlocal enabledelayedexpansion
set /a cntDiffFound=0
set /a cntOptDisabled=0
set /a cntOptDemand=0
set /a cntOptAuto=0
set /a cntOptAutoDelayed=0
set /a cntOptManual=0
for /f "tokens=1,2 delims=," %%a in (%listOptExtended%) do (
	set "serviceName=%%a" & set "testServiceName=!serviceName:"=!"
	if not "!testServiceName!"=="" (
 			set "startType=%%b" & set "testStartType=!startType:"=!"
			if not "!testStartType!"=="" (
				if "!testStartType!"=="Demand" (
					set /a cntOptDemand+=1
				) else if "!testStartType!"=="Automatic" (
					set /a cntOptAuto+=1
				) else if "!testStartType!"=="Manual" (
					set /a cntOptManual+=1
				) else if "!testStartType!"=="AutomaticDelayedStart" (
					set /a cntOptAutoDelayed+=1
				) else if "!testStartType!"=="Disabled" (
					set /a cntOptDisabled+=1
				)
			)
	)
)
echo %BLANK%Result:
set "sign=" & set /a diff=0
if !cntOptDisabled! NEQ !cntCurrDisabled! (
	set /a cntDiffFound+=1
	if !cntOptDisabled! LSS !cntCurrDisabled! (
		set "sign=-"
	) else (
		set "sign=+"
	)
	set /a diff=!cntOptDisabled!-!cntCurrDisabled!
	if !diff! LSS 0 (
		set /a diff=-!diff!
    )
)
echo %TAB%Disabled: !sign!!diff!
set "sign=" & set /a diff=0
if !cntOptAuto! NEQ !cntCurrAuto! (
	set /a cntDiffFound+=1
	if !cntOptAuto! LSS !cntCurrAuto! (
		set "sign=-"
	) else (
		set "sign=+"
	)
	set /a diff=!cntOptAuto!-!cntCurrAuto!
	if !diff! LSS 0 (
		set /a diff=-!diff!
    )
)
echo %TAB%Automatic: !sign!!!diff!
set "sign=" & set /a diff=0
if !cntOptAutoDelayed! NEQ !cntCurrAutoDelayed! (
	set /a cntDiffFound+=1
	if !cntOptAutoDelayed! LSS !cntCurrAutoDelayed! (
		set "sign=-"
	) else (
		set "sign=+"
	)
	set /a diff=!cntOptAutoDelayed!-!cntCurrAutoDelayed!
	if !diff! LSS 0 (
		set /a diff=-!diff!
    )
)
echo %TAB%AutomaticDelayed: !sign!!diff!
set "sign=" & set /a diff=0
if !cntOptManual! NEQ !cntCurrManual! (
	set /a cntDiffFound+=1
	set /a diff=!cntOptManual!-!cntCurrManual!
	if !diff! LSS 0 (
		set "sign=-"
		set /a diff=-!diff!
    ) else (
		set "sign=+"
	)
)
echo %TAB%Manual: !sign!!diff!
set "sign=" & set /a diff=0
if !cntOptDemand! NEQ !cntCurrDemand! (
	set /a cntDiffFound+=1
	set /a diff=!cntOptDemand!-!cntCurrDemand!
    if !diff! LSS 0 (
		set "sign=-"
		set /a diff=-!diff!
    ) else (
		set "sign=+"
	)
)
echo %TAB%Demand: !sign!!diff!
echo(
echo(
echo %BLANK%Conclusion:
if !cntDiffFound! EQU 0 (
echo %TAB%No optimization needed.
echo(
echo %BLANK%Press any key to quit...
pause > NUL
endlocal & goto :end
)
echo %TAB%!cntDiffFound! differences found.
echo %TAB%Optimization is recommended.
echo(
echo Apply change of local services^' startup type?
set /P "userInput=YN "
if /i "!userInput!"=="N" ( endlocal & goto :end )
endlocal
goto :EOF
::
:CheckWindowsVersion
setlocal
for /f "tokens=3 delims= " %%a in ('wmic os get caption /value ^| findstr /i /C:"Caption"') do (
    set /A osVersion=%%a
)
if !osVersion! LSS 11 (
	echo(
    echo This computer is not running Windows 11. Exiting...
    timeout /t !errorTimeoutSecs! > NUL & goto :end
)
endlocal
goto :EOF
::
:OptimizeStartupTypes
setlocal enabledelayedexpansion 
set /a cntFailed=0
set /a cntProcessed=0
set /a cntDeclined=0
if exist "%logOptimization%" ( del /f /q "%logOptimization%" ) 
echo(
echo %BLANK%Optimizing system services...
echo "Name","StartType" > "%logOptimization%"
for /f "tokens=1,2,3 delims=," %%a in (%listOptExtended%) do (
	set "serviceName=%%a" & set testServiceName=!serviceName:"=!"
	if not !testServiceName!=="" (
	:: Do NOT process Windows Defender
	if not "!testServiceName!"=="WinDefend" (
		set /a cntProcessed+=1
		:: Check for service is installed
		sc query !serviceName! 1>nul 2>NUL
		if "%errorlevel%"=="0" (
			:: Service is installed
			set "startType=%%b" & set "startType=!startType:"=!"
			set "runState=%%c" & set "runState=!runState:"=!"
			:: Set the new start type of the service
			:: Important: A space is needed between the equal sign and the value!
			if "!startType!"=="Disabled" (
				set "runState=Stopped"
				set "scCmd=sc config !serviceName! start= disabled"
				echo !serviceName!,"!startType!" >> "%logOptimization%"
			) else if "!startType!"=="Manual" (
				set "scCmd=sc config !serviceName! start= manual"
				echo !serviceName!,"!startType!" >> "%logOptimization%"
			) else if "!startType!"=="Automatic" (
				set "scCmd=sc config !serviceName! start= auto
				echo !serviceName!,"!startType!" >> "%logOptimization%"
			) else if "!startType!"=="AutomaticDelayed" (
				set "scCmd=sc config !serviceName! start= delayed-auto"
				echo !serviceName!,"!startType!" >> "%logOptimization%"
			) else if "!startType!"=="Demand" (
				set "scCmd=sc config !serviceName! start= demand"
				echo !serviceName!,"!startType!" >> "%logOptimization%"
			)
			if "!runState!"=="Running" ( net stop !serviceName! )
			"!scCmd!"
			if "!runState!!=="Running" ( net start !serviceName! )
	    )  else (
			set /a cntFailed+=1
		)
	) else (
			set /a cntDeclined+=1
		)
	)
)
echo(
echo %BLANK%Done!
echo(
echo %BLANK%Result:
echo %TAB%Services processed: !cntProcessed!
echo %TAB%Therefrom failed: !cntFailed!
if !cntDeclined! NEQ 0 (
echo %TAB%!Declined: !cntDeclined! 
)
echo(
echo %BLANK%Press any key to continue...
pause > NUL
endlocal
goto :EOF
::
:ShowOptimizerLog
echo(
echo %BLANK%Optimized services LOG: 
echo(
setlocal enabledelayedexpansion 
for /f "tokens=*" %%a in (%logOptimization%) do (
	set "logLine=%%a"
	if not "!logLine!"=="" ( echo !logLine! )
)
echo(
echo Press any key to continue...
pause > NUL
endlocal
goto :EOF
:: 
:DisableWindowsDefender
echo(
echo %BLANK%Temporarily disabling Windows Defender if running...
sc query windefend | findstr /C:"RUNNING" 2>NUL 1>NUL
if "%errorlevel%" == "0" (
echo %BLANK%Disabling Microsoft Defender...
reg add "HKLM\Software\Policies\Microsoft\Windows Defender" /v DisableAntiSpyware /t REG_DWORD /d 1 /f  2>NUL 1>NUL
reg add "HKLM\Software\Policies\Microsoft\Windows Defender" /v DisableAntiVirus /t REG_DWORD /d 1 /f  2>NUL 1>NUL 
reg add "HKLM\Software\Policies\Microsoft\Windows Defender" /v DisableBehaviorMonitoring /t REG_DWORD /d 1 /f  2>NUL 1>NUL
reg add "HKLM\Software\Policies\Microsoft\Windows Defender" /v DisableRealtimeMonitoring /t REG_DWORD /d 1 /f  2>NUL 1>NUL
set /a windowsDefenderDisabled=1
)
goto :EOF
::
:EnableWindowsDefender
echo(
echo %BLANK%Enabling temporarily disabled Windows Defender...
reg delete "HKLM\Software\Policies\Microsoft\Windows Defender" /v DisableAntiSpyware /f  2>NUL 1>NUL
reg delete "HKLM\Software\Policies\Microsoft\Windows Defender" /v DisableAntiVirus /f  2>NUL 1>NUL
reg delete "HKLM\Software\Policies\Microsoft\Windows Defender" /v DisableBehaviorMonitoring /f  2>NUL 1>NUL
reg delete "HKLM\Software\Policies\Microsoft\Windows Defender" /v DisableRealtimeMonitoring /f  2>NUL 1>NUL
goto :EOF
::
